;(function() {
    if (window.Yuntu) { return };
    var methodHandlers = {};
    function agent (){
        var _agent = YuntuBridge.agent();
        return _agent;
    }

    //javascript callback 函数
    function callback(cb,data){
        if(!cb||cb.length<1){
            return;
        }
        var self=callback;
        if(!self.cbs){
            return;
        }
        cb = self.cbs[cb];
        if(!cb){
            return;
        }

        if(data){
            cb(data);
        }

    }
    //javascript callback注册函数
    function regcb(func){
        if(!func)return "";
        if(!func.cbidx){
            var self=callback;
            if(!self.cbs)self.cbs={cnt:0};
            self=self.cbs;
            func.cbidx="cb"+(self.cnt++);
            self[func.cbidx]=func;
        }
        return func.cbidx;
    }

    //公开的接口 向Native发送消息
    function send(jstype, message, responseCallback) {
        if(!YuntuBridge){return}
        _doSend(jstype, message, responseCallback);
    }
    //同步方法
    function syncall(jstype,data,extra){
        if(!YuntuBridge){return '';}
        return YuntuBridge.syncallDataExtra(jstype,data,extra);
    }
    //注册函数
    function registerHandler(eventName, handler) {
        methodHandlers[eventName] = handler
    }

    //调用已经注册的函数
    function callHandler(eventName, message) {
        var methodHandler;

        if(eventName){
            methodHandler  = methodHandlers[eventName];

            if(methodHandler){
                try {
                    var respdata = methodHandler(message);

                    var resp = {
                        ret: 0,
                        msg: "success!",
                        result: respdata
                    }

                    return resp;
                } catch(exception) {
                    if (typeof console != 'undefined') {
                        console.log("WebViewJavascriptBridge: WARNING: javascript handler threw.", message, exception)
                    }

                    var resp = {
                        ret: 5,
                        msg: "exception throw!",
                        result:{}
                    };
                    return resp;
                }
            }else{
                var resp = {
                    ret: 3,
                    msg: "method not found!",
                    result:{}
                };
                return resp;
            }
        }else{
            var resp = {
                ret: 1,
                msg: "method not registed!",
                result:{}
            };
            return resp;
        }
    }
    //私有的接口 向Native发送消息
    function _doSend(jstype, message, responseCallback) {
        if (jstype) {
            if (message) {
                if (responseCallback) {
                    YuntuBridge.callDataCallback(jstype, message, regcb(responseCallback));
                }else{
                    YuntuBridge.callDataCallback(jstype, message);
                }
            }else{
                YuntuBridge.callDataCallback(jstype);
            }
        }
    }

    window.Yuntu = {
        send: send,
        agent: agent,
        callback: callback,
        registerHandler: registerHandler,
        callHandler: callHandler,
        syncall:syncall
    };

    var doc = document;
    var readyEvent = doc.createEvent('Events');
    readyEvent.initEvent('YuntuWebViewJavascriptBridgeReady');
    doc.dispatchEvent(readyEvent);

})();